public with sharing class twitterHelper {

    //oauth_timestamp parameter indicates when the request was created. 
    public static long generateTimeStamp()
        {
            long timestamp = datetime.now().getTime(); 
            timestamp = timestamp / 1000;
            return timestamp;
        }

    //oauth_nonce- parameter is a unique token your application should generate for each unique request. 
    public static String generateOathNonce()
    {
        //A collection of binary data stored as a single object.Blobs can be accepted as Web service arguments
        //Generates an Advanced Encryption Standard (AES). keysize=128,192,256
        Blob blobKey = crypto.generateAesKey(256);
        //convertToHex- Returns a hexadecimal (base 16) representation of the inputBlob.
        String key = EncodingUtil.convertToHex(blobKey);
        //base64Encode-Converts a Blob to an unencoded String representing its normal form.
        String oathNonce = EncodingUtil.base64Encode(Blob.valueOf(key));
        //(math.random() * 10)- generate random no between 1-10
        oathNonce = oathNonce.replaceAll('[^a-zA-Z0-9]+',''+integer.valueOf(math.random() * 10));
        //The substring begins at the specified beginIndex and extends to the character at index endIndex
        oathNonce = oathNonce.substring(0,42);
        return oathNonce;
    }
    
    /*
    public static void twitterPost(String ApiKey, String ApiSecret, String AccessToken, String AccessTokenSecret, String message)
    {
        if(String.isNotBlank(ApiKey) && String.isNotBlank(ApiSecret) && String.isNotBlank(AccessToken) && String.isNotBlank(AccessTokenSecret) && String.isNotBlank(message))
        {
            String oathNonce = TwitterPost_Utility.generateOathNonce();
            Long timestamp = TwitterPost_Utility.generateTimeStamp();
            //oauth_signature parameter contains a value which is generated by running all of the other request 
            //parameters and two secret values through a signing algorithm
            String signature = '';
           //Encodes a string into the application 
            message = Encodingutil.urlEncode(message, 'UTF-8');
            String othSecret = Encodingutil.urlEncode(Accesstokensecret, 'UTF-8');
            String consumSecret = Encodingutil.urlEncode(APIsecret, 'UTF-8');
            String othToken = Encodingutil.urlEncode(Accesstoken, 'UTF-8');
            String othNonce = Encodingutil.urlEncode(oathNonce, 'UTF-8');
            String consumKey = Encodingutil.urlEncode(APIkey, 'UTF-8');
            message = message.replaceAll('\\+','%20');
            String paramString = 'include_entities=true&'+
                                 'oauth_consumer_key='+consumKey+'&'+
                                 'oauth_nonce='+othNonce+'&'+
                                 'oauth_signature_method=HMAC-SHA1&'+
                                 'oauth_timestamp='+timestamp+'&'+
                                 'oauth_token='+othToken+'&'+
                                 'oauth_version=1.0&'+
                                 'status='+message;
            string baseString = 'POST&'+EncodingUtil.urlEncode('https://api.twitter.com/1.1/statuses/update.json', 'UTF-8')+'&'+ 
                  EncodingUtil.urlEncode(paramString, 'UTF-8');
            string signString = consumSecret+'&'+othSecret;
            blob blobBaseString = Blob.ValueOf(baseString);
            blob blobSignString = Blob.ValueOf(signString);
            blob signBlob = crypto.generateMac('hmacSHA1',blobBaseString ,blobSignString );        
            signature =  EncodingUtil.base64Encode(signBlob);
            
            if(String.isNotBlank(signature))
            {
                  signature = Encodingutil.urlEncode(signature, 'UTF-8');
                  HttpRequest req = new HttpRequest();
                  req.setEndpoint('https://api.twitter.com/1.1/statuses/update.json?include_entities=true');
                  req.setMethod('POST');
                  string reqstring = 'OAuth oauth_consumer_key="'+consumKey+'",'+
                                     'oauth_nonce="'+othNonce+'",'+
                                     'oauth_signature="'+signature +'",'+
                                     'oauth_signature_method="HMAC-SHA1",'+
                                     'oauth_timestamp="'+timestamp+'",'+
                                     'oauth_token="'+othToken+'",'+
                                     'oauth_version="1.0"';
                  system.debug('### req String :'+reqstring);
                  req.setHeader('Authorization',reqstring);
                  req.setHeader('Content-Type','application/x-www-form-urlencoded');
                  req.setBody('status='+message);
                  if(!Test.isRunningTest())
                  {
                      Http http = new Http();
                      HTTPResponse res = http.send(req);
                      system.debug(res.getBody());
                  }
            }
        }
    }
    */
}
