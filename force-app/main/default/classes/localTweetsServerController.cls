public with sharing class localTweetsServerController {
    
    @AuraEnabled
    public String street { get;set; }
    @AuraEnabled
    public String city { get;set; }
    @AuraEnabled
    public String state { get;set; }
    @AuraEnabled
    public String country { get;set; }

    @AuraEnabled(cacheable=true)
    public static localTweetsServerController getLocationAddress(String locationID) {
        localTweetsServerController obj = new localTweetsServerController();

        System.Debug('##### locationID: ' + locationID);

        Sobject address;
        String soql = 'SELECT City,Country,State,Street from Address WHERE ParentId = ' + ' \'' + locationID +'\'' + ' and isDeleted = false order by createddate desc limit 1';
        System.Debug('##### soql: ' + soql);
        if (String.isNotEmpty(locationID))
            address = Database.query(soql);

        if (address != null)
        {
            System.Debug('##### address is not null: ' + address);
            obj.street = (String)address.get('Street');
            obj.city = (String)address.get('City');
            obj.state = (String)address.get('State');
            
        }
        return obj;

    }

    @AuraEnabled(cacheable=true)
    public static localTweetsServerController getTwitterAccounts(String cityState) {
        localTweetsServerController obj = new localTweetsServerController();

        Twitter_Integration__mdt twitterSecret = [SELECT Token_Secret__c,Token__c, AccessToken__c, TokenSecret__c FROM Twitter_Integration__mdt limit 1];

        String apiKey = twitterSecret.Token__c;        
        String apiSecret = twitterSecret.Token_Secret__c;
        String accesToken = twitterSecret.AccessToken__c;        
        String accesTokenSecret = twitterSecret.TokenSecret__c;

        String oathNonce = twitterHelper.generateOathNonce();
        Long timestamp = twitterHelper.generateTimeStamp();
        //oauth_signature parameter contains a value which is generated by running all of the other request 
        //parameters and two secret values through a signing algorithm
        String signature = '';
        String othSecret = Encodingutil.urlEncode(accesTokenSecret, 'UTF-8');
        String consumSecret = Encodingutil.urlEncode(apiSecret, 'UTF-8');
        String othToken = Encodingutil.urlEncode(accesToken, 'UTF-8');
        String othNonce = Encodingutil.urlEncode(oathNonce, 'UTF-8');
        String consumKey = Encodingutil.urlEncode(apiKey, 'UTF-8');

        String queryValue = Encodingutil.urlEncode('City of' + cityState, 'UTF-8');

        String paramString = 'include_entities=true&'+
                                 'oauth_consumer_key='+consumKey+'&'+
                                 'oauth_nonce='+othNonce+'&'+
                                 'oauth_signature_method=HMAC-SHA1&'+
                                 'oauth_timestamp='+timestamp+'&'+
                                 'oauth_token='+othToken+'&'+
                                 'oauth_version=1.0&'+
                                 'q='+ queryValue;
        
        string baseString = 'GET&'+EncodingUtil.urlEncode('https://api.twitter.com/1.1/users/search.json', 'UTF-8')+'&'+ 
        EncodingUtil.urlEncode(paramString, 'UTF-8');
        string signString = consumSecret+'&'+othSecret;
        blob blobBaseString = Blob.ValueOf(baseString);
        blob blobSignString = Blob.ValueOf(signString);
        blob signBlob = crypto.generateMac('hmacSHA1',blobBaseString ,blobSignString );        
        signature =  EncodingUtil.base64Encode(signBlob);

        if(String.isNotBlank(signature))
        {
            signature = Encodingutil.urlEncode(signature, 'UTF-8');
            HttpRequest req = new HttpRequest();
            req.setEndpoint('https://api.twitter.com/1.1/users/search.json?q='+ queryValue);
            req.setMethod('GET');
            string reqstring = 'OAuth oauth_consumer_key="'+consumKey+'",'+
                                'oauth_nonce="'+othNonce+'",'+
                                'oauth_signature="'+signature +'",'+
                                'oauth_signature_method="HMAC-SHA1",'+
                                'oauth_timestamp="'+timestamp+'",'+
                                'oauth_token="'+othToken+'",'+
                                'oauth_version="1.0"';
            system.debug('### req String :'+reqstring);
            req.setHeader('authorization',reqstring);
            //req.setBody('q='+ queryValue);
            if(!Test.isRunningTest())
            {
                Http http = new Http();
                HTTPResponse res = http.send(req);
                system.debug('####### Twitter Response: ' + res.getBody());
            }

        }

        return obj;
    }

    @AuraEnabled(cacheable=true)
    public static localTweetsServerController getOfficialsTweets(String cityState) {
        
        localTweetsServerController obj = new localTweetsServerController();

        Twitter_Integration__mdt twitterSecret = [SELECT Token_Secret__c,Token__c FROM Twitter_Integration__mdt limit 1];
        

        /* ------------ Start: authenticate to Twitter - Retrieve Bearer Token: ----------------- */
        String oauthConsumerKey = twitterSecret.Token__c;        
        String oauthConsumerSecret = twitterSecret.Token_Secret__c;

        String baseUrl = 'https://api.twitter.com';
        String oauthSignatureMethod = 'HMAC-SHA1';
            
        String keyencoded = EncodingUtil.urlEncode(oauthConsumerKey, 'UTF-8');
        String secretkeyencoded = EncodingUtil.urlEncode(oauthConsumerSecret, 'UTF-8');
        
        //Create Final Key String
        String sFinal = keyencoded + ':' + secretkeyencoded;
        //Convert to Blob
        Blob headerValue = Blob.valueOf(sFinal);
        
        //Build Request
        HttpRequest req = new HttpRequest();
        req.setEndpoint('https://api.twitter.com/oauth2/token');
        req.setMethod('POST');
        
        //Add Auth Header
        String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization', authorizationHeader);
        
        //You need to add this to the request - proved easy to miss in instructions...
        req.setBody('grant_type=client_credentials');
        
        //Make request
        Http http = new Http();
        HTTPResponse res = http.send(req);
        String responseBody = res.getBody();
        System.debug('########## Twitter authentication responseBody : ' + responseBody);
        String stoken;
        //Parse JSON for Bearer Token
        JSONParser parser = JSON.createParser(res.getBody());
        while (parser.nextToken() != null) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME && parser.getText() == 'access_token'){
            parser.nextToken();
            stoken = parser.getText();
            System.debug('########## bearer token : ' + stoken);
            }
        }

         /* ------------ End: authenticate to Twitter: - Retrieve Bearer Token ----------------- */

        /* ------------ Start: fetch official Twitter account for city and state using users/search API: ----------------- */

        System.debug('########## cityState : ' + cityState);   
        HttpRequest req2 = new HttpRequest();
        //I actually store the endpoint in the same custom setting and build dynamically, but for purposes of demo:
        //req2.setEndpoint('https://api.twitter.com/1.1/users/search.json?q=' + 'city of ' + cityState);
        req2.setEndpoint('https://api.twitter.com/1.1/search/tweets.json?q=' + cityState);
        req2.setMethod('GET');
    
        //Call Bearer token Method
        //Note - unless invalidated, I believe you can store this and keep using it indefinitely, but again, to demo concept
        String authorizationHeader2 = 'Bearer ' + stoken;
        req2.setHeader('authorization', authorizationHeader2);
    
        Http http2 = new Http();
        HTTPResponse res2 = http2.send(req2);
        System.debug('########## res2 : ' + res2);
        String sBody2 = res2.getBody();
        System.debug('########## sBody2 : ' + sBody2);
        String responseBodyTwitterAccounts = res2.getBody();
        System.debug('########## responseBodyTwitterAccounts : ' + responseBodyTwitterAccounts);

        /* ------------ End: fetch official Twitter account for city and state using users/search API:: ----------------- */

        return obj;
    }

     

    
}
